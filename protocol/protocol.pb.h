// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class LoginRequest;
class LoginResponse;
class Friend;
class GetFriendsResponse;
class SendMessageRequest;
class FriendNotification;
class MessageNotification;
class WelcomeNotification;
class Request;
class Response;
class Notification;
class Message;

enum MSG {
  Login_Request = 10001,
  Login_Response = 10002,
  Logout_Request = 10003,
  Logout_Response = 10004,
  Keepalive_Request = 10005,
  Keepalive_Response = 10006,
  Get_Friends_Request = 10007,
  Get_Friends_Response = 10008,
  Send_Message_Request = 10009,
  Send_Message_Response = 10010,
  Friend_Notification = 20001,
  Message_Notification = 20002,
  Welcome_Notification = 20003
};
bool MSG_IsValid(int value);
const MSG MSG_MIN = Login_Request;
const MSG MSG_MAX = Welcome_Notification;
const int MSG_ARRAYSIZE = MSG_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_descriptor();
inline const ::std::string& MSG_Name(MSG value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_descriptor(), value);
}
inline bool MSG_Parse(
    const ::std::string& name, MSG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG>(
    MSG_descriptor(), name, value);
}
// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:chat.LoginRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 ttl = 1;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 1;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.LoginResponse)
 private:
  inline void set_has_ttl();
  inline void clear_has_ttl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ttl_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:chat.Friend)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  bool online_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Friend* default_instance_;
};
// -------------------------------------------------------------------

class GetFriendsResponse : public ::google::protobuf::Message {
 public:
  GetFriendsResponse();
  virtual ~GetFriendsResponse();

  GetFriendsResponse(const GetFriendsResponse& from);

  inline GetFriendsResponse& operator=(const GetFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendsResponse& default_instance();

  void Swap(GetFriendsResponse* other);

  // implements Message ----------------------------------------------

  GetFriendsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFriendsResponse& from);
  void MergeFrom(const GetFriendsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.Friend friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::chat::Friend& friends(int index) const;
  inline ::chat::Friend* mutable_friends(int index);
  inline ::chat::Friend* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::chat::Friend >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::chat::Friend >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:chat.GetFriendsResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chat::Friend > friends_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static GetFriendsResponse* default_instance_;
};
// -------------------------------------------------------------------

class SendMessageRequest : public ::google::protobuf::Message {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageRequest& default_instance();

  void Swap(SendMessageRequest* other);

  // implements Message ----------------------------------------------

  SendMessageRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes receiver = 1;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  inline const ::std::string& receiver() const;
  inline void set_receiver(const ::std::string& value);
  inline void set_receiver(const char* value);
  inline void set_receiver(const void* value, size_t size);
  inline ::std::string* mutable_receiver();
  inline ::std::string* release_receiver();
  inline void set_allocated_receiver(::std::string* receiver);

  // required string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:chat.SendMessageRequest)
 private:
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* receiver_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static SendMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class FriendNotification : public ::google::protobuf::Message {
 public:
  FriendNotification();
  virtual ~FriendNotification();

  FriendNotification(const FriendNotification& from);

  inline FriendNotification& operator=(const FriendNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendNotification& default_instance();

  void Swap(FriendNotification* other);

  // implements Message ----------------------------------------------

  FriendNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendNotification& from);
  void MergeFrom(const FriendNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:chat.FriendNotification)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  bool online_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static FriendNotification* default_instance_;
};
// -------------------------------------------------------------------

class MessageNotification : public ::google::protobuf::Message {
 public:
  MessageNotification();
  virtual ~MessageNotification();

  MessageNotification(const MessageNotification& from);

  inline MessageNotification& operator=(const MessageNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageNotification& default_instance();

  void Swap(MessageNotification* other);

  // implements Message ----------------------------------------------

  MessageNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageNotification& from);
  void MergeFrom(const MessageNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // required string timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:chat.MessageNotification)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sender_;
  ::std::string* text_;
  ::std::string* timestamp_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static MessageNotification* default_instance_;
};
// -------------------------------------------------------------------

class WelcomeNotification : public ::google::protobuf::Message {
 public:
  WelcomeNotification();
  virtual ~WelcomeNotification();

  WelcomeNotification(const WelcomeNotification& from);

  inline WelcomeNotification& operator=(const WelcomeNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WelcomeNotification& default_instance();

  void Swap(WelcomeNotification* other);

  // implements Message ----------------------------------------------

  WelcomeNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WelcomeNotification& from);
  void MergeFrom(const WelcomeNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:chat.WelcomeNotification)
 private:
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* text_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static WelcomeNotification* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .chat.LoginRequest login = 1;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 1;
  inline const ::chat::LoginRequest& login() const;
  inline ::chat::LoginRequest* mutable_login();
  inline ::chat::LoginRequest* release_login();
  inline void set_allocated_login(::chat::LoginRequest* login);

  // optional .chat.SendMessageRequest send_message = 2;
  inline bool has_send_message() const;
  inline void clear_send_message();
  static const int kSendMessageFieldNumber = 2;
  inline const ::chat::SendMessageRequest& send_message() const;
  inline ::chat::SendMessageRequest* mutable_send_message();
  inline ::chat::SendMessageRequest* release_send_message();
  inline void set_allocated_send_message(::chat::SendMessageRequest* send_message);

  // @@protoc_insertion_point(class_scope:chat.Request)
 private:
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_send_message();
  inline void clear_has_send_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::chat::LoginRequest* login_;
  ::chat::SendMessageRequest* send_message_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // required bool last_response = 2;
  inline bool has_last_response() const;
  inline void clear_last_response();
  static const int kLastResponseFieldNumber = 2;
  inline bool last_response() const;
  inline void set_last_response(bool value);

  // optional bytes error_describe = 3;
  inline bool has_error_describe() const;
  inline void clear_error_describe();
  static const int kErrorDescribeFieldNumber = 3;
  inline const ::std::string& error_describe() const;
  inline void set_error_describe(const ::std::string& value);
  inline void set_error_describe(const char* value);
  inline void set_error_describe(const void* value, size_t size);
  inline ::std::string* mutable_error_describe();
  inline ::std::string* release_error_describe();
  inline void set_allocated_error_describe(::std::string* error_describe);

  // optional .chat.LoginResponse login = 4;
  inline bool has_login() const;
  inline void clear_login();
  static const int kLoginFieldNumber = 4;
  inline const ::chat::LoginResponse& login() const;
  inline ::chat::LoginResponse* mutable_login();
  inline ::chat::LoginResponse* release_login();
  inline void set_allocated_login(::chat::LoginResponse* login);

  // optional .chat.GetFriendsResponse get_friends = 5;
  inline bool has_get_friends() const;
  inline void clear_get_friends();
  static const int kGetFriendsFieldNumber = 5;
  inline const ::chat::GetFriendsResponse& get_friends() const;
  inline ::chat::GetFriendsResponse* mutable_get_friends();
  inline ::chat::GetFriendsResponse* release_get_friends();
  inline void set_allocated_get_friends(::chat::GetFriendsResponse* get_friends);

  // @@protoc_insertion_point(class_scope:chat.Response)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_last_response();
  inline void clear_has_last_response();
  inline void set_has_error_describe();
  inline void clear_has_error_describe();
  inline void set_has_login();
  inline void clear_has_login();
  inline void set_has_get_friends();
  inline void clear_has_get_friends();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_describe_;
  ::chat::LoginResponse* login_;
  ::chat::GetFriendsResponse* get_friends_;
  bool result_;
  bool last_response_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Notification : public ::google::protobuf::Message {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();

  void Swap(Notification* other);

  // implements Message ----------------------------------------------

  Notification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .chat.FriendNotification friend = 1;
  inline bool has_friend_() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline const ::chat::FriendNotification& friend_() const;
  inline ::chat::FriendNotification* mutable_friend_();
  inline ::chat::FriendNotification* release_friend_();
  inline void set_allocated_friend_(::chat::FriendNotification* friend_);

  // optional .chat.MessageNotification msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::chat::MessageNotification& msg() const;
  inline ::chat::MessageNotification* mutable_msg();
  inline ::chat::MessageNotification* release_msg();
  inline void set_allocated_msg(::chat::MessageNotification* msg);

  // optional .chat.WelcomeNotification welcome = 3;
  inline bool has_welcome() const;
  inline void clear_welcome();
  static const int kWelcomeFieldNumber = 3;
  inline const ::chat::WelcomeNotification& welcome() const;
  inline ::chat::WelcomeNotification* mutable_welcome();
  inline ::chat::WelcomeNotification* release_welcome();
  inline void set_allocated_welcome(::chat::WelcomeNotification* welcome);

  // @@protoc_insertion_point(class_scope:chat.Notification)
 private:
  inline void set_has_friend_();
  inline void clear_has_friend_();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_welcome();
  inline void clear_has_welcome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::chat::FriendNotification* friend__;
  ::chat::MessageNotification* msg_;
  ::chat::WelcomeNotification* welcome_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Notification* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .chat.MSG msg_type = 1;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  inline ::chat::MSG msg_type() const;
  inline void set_msg_type(::chat::MSG value);

  // required fixed32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional fixed32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // optional .chat.Request request = 4;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 4;
  inline const ::chat::Request& request() const;
  inline ::chat::Request* mutable_request();
  inline ::chat::Request* release_request();
  inline void set_allocated_request(::chat::Request* request);

  // optional .chat.Response response = 5;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 5;
  inline const ::chat::Response& response() const;
  inline ::chat::Response* mutable_response();
  inline ::chat::Response* release_response();
  inline void set_allocated_response(::chat::Response* response);

  // optional .chat.Notification notification = 6;
  inline bool has_notification() const;
  inline void clear_notification();
  static const int kNotificationFieldNumber = 6;
  inline const ::chat::Notification& notification() const;
  inline ::chat::Notification* mutable_notification();
  inline ::chat::Notification* release_notification();
  inline void set_allocated_notification(::chat::Notification* notification);

  // @@protoc_insertion_point(class_scope:chat.Message)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_notification();
  inline void clear_has_notification();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int msg_type_;
  ::google::protobuf::uint32 sequence_;
  ::chat::Request* request_;
  ::chat::Response* response_;
  ::chat::Notification* notification_;
  ::google::protobuf::uint32 session_id_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required bytes username = 1;
inline bool LoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.LoginRequest.username)
  return *username_;
}
inline void LoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:chat.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.LoginRequest.username)
}
inline void LoginRequest::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRequest.username)
}
inline ::std::string* LoginRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.LoginRequest.username)
  return username_;
}
inline ::std::string* LoginRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRequest.username)
}

// optional string password = 2;
inline bool LoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:chat.LoginRequest.password)
  return *password_;
}
inline void LoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:chat.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRequest.password)
}
inline ::std::string* LoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.LoginRequest.password)
  return password_;
}
inline ::std::string* LoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRequest.password)
}

// -------------------------------------------------------------------

// LoginResponse

// required fixed32 ttl = 1;
inline bool LoginResponse::has_ttl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_ttl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 LoginResponse::ttl() const {
  // @@protoc_insertion_point(field_get:chat.LoginResponse.ttl)
  return ttl_;
}
inline void LoginResponse::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:chat.LoginResponse.ttl)
}

// -------------------------------------------------------------------

// Friend

// required bytes name = 1;
inline bool Friend::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend::name() const {
  // @@protoc_insertion_point(field_get:chat.Friend.name)
  return *name_;
}
inline void Friend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:chat.Friend.name)
}
inline void Friend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Friend.name)
}
inline void Friend::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Friend.name)
}
inline ::std::string* Friend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.Friend.name)
  return name_;
}
inline ::std::string* Friend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Friend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Friend.name)
}

// optional bool online = 2;
inline bool Friend::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool Friend::online() const {
  // @@protoc_insertion_point(field_get:chat.Friend.online)
  return online_;
}
inline void Friend::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:chat.Friend.online)
}

// -------------------------------------------------------------------

// GetFriendsResponse

// repeated .chat.Friend friends = 1;
inline int GetFriendsResponse::friends_size() const {
  return friends_.size();
}
inline void GetFriendsResponse::clear_friends() {
  friends_.Clear();
}
inline const ::chat::Friend& GetFriendsResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:chat.GetFriendsResponse.friends)
  return friends_.Get(index);
}
inline ::chat::Friend* GetFriendsResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:chat.GetFriendsResponse.friends)
  return friends_.Mutable(index);
}
inline ::chat::Friend* GetFriendsResponse::add_friends() {
  // @@protoc_insertion_point(field_add:chat.GetFriendsResponse.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::Friend >&
GetFriendsResponse::friends() const {
  // @@protoc_insertion_point(field_list:chat.GetFriendsResponse.friends)
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::chat::Friend >*
GetFriendsResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:chat.GetFriendsResponse.friends)
  return &friends_;
}

// -------------------------------------------------------------------

// SendMessageRequest

// optional bytes receiver = 1;
inline bool SendMessageRequest::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageRequest::set_has_receiver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageRequest::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageRequest::clear_receiver() {
  if (receiver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_->clear();
  }
  clear_has_receiver();
}
inline const ::std::string& SendMessageRequest::receiver() const {
  // @@protoc_insertion_point(field_get:chat.SendMessageRequest.receiver)
  return *receiver_;
}
inline void SendMessageRequest::set_receiver(const ::std::string& value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
  // @@protoc_insertion_point(field_set:chat.SendMessageRequest.receiver)
}
inline void SendMessageRequest::set_receiver(const char* value) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.SendMessageRequest.receiver)
}
inline void SendMessageRequest::set_receiver(const void* value, size_t size) {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  receiver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.SendMessageRequest.receiver)
}
inline ::std::string* SendMessageRequest::mutable_receiver() {
  set_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.SendMessageRequest.receiver)
  return receiver_;
}
inline ::std::string* SendMessageRequest::release_receiver() {
  clear_has_receiver();
  if (receiver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receiver_;
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendMessageRequest::set_allocated_receiver(::std::string* receiver) {
  if (receiver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receiver_;
  }
  if (receiver) {
    set_has_receiver();
    receiver_ = receiver;
  } else {
    clear_has_receiver();
    receiver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.SendMessageRequest.receiver)
}

// required string text = 2;
inline bool SendMessageRequest::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageRequest::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& SendMessageRequest::text() const {
  // @@protoc_insertion_point(field_get:chat.SendMessageRequest.text)
  return *text_;
}
inline void SendMessageRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:chat.SendMessageRequest.text)
}
inline void SendMessageRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.SendMessageRequest.text)
}
inline void SendMessageRequest::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.SendMessageRequest.text)
}
inline ::std::string* SendMessageRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.SendMessageRequest.text)
  return text_;
}
inline ::std::string* SendMessageRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendMessageRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.SendMessageRequest.text)
}

// -------------------------------------------------------------------

// FriendNotification

// required bytes name = 1;
inline bool FriendNotification::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendNotification::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendNotification::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendNotification::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FriendNotification::name() const {
  // @@protoc_insertion_point(field_get:chat.FriendNotification.name)
  return *name_;
}
inline void FriendNotification::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:chat.FriendNotification.name)
}
inline void FriendNotification::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.FriendNotification.name)
}
inline void FriendNotification::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.FriendNotification.name)
}
inline ::std::string* FriendNotification::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.FriendNotification.name)
  return name_;
}
inline ::std::string* FriendNotification::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendNotification::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.FriendNotification.name)
}

// optional bool online = 2;
inline bool FriendNotification::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendNotification::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendNotification::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendNotification::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool FriendNotification::online() const {
  // @@protoc_insertion_point(field_get:chat.FriendNotification.online)
  return online_;
}
inline void FriendNotification::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendNotification.online)
}

// -------------------------------------------------------------------

// MessageNotification

// required string sender = 1;
inline bool MessageNotification::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageNotification::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageNotification::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageNotification::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& MessageNotification::sender() const {
  // @@protoc_insertion_point(field_get:chat.MessageNotification.sender)
  return *sender_;
}
inline void MessageNotification::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:chat.MessageNotification.sender)
}
inline void MessageNotification::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.MessageNotification.sender)
}
inline void MessageNotification::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNotification.sender)
}
inline ::std::string* MessageNotification::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.MessageNotification.sender)
  return sender_;
}
inline ::std::string* MessageNotification::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageNotification::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNotification.sender)
}

// required string text = 2;
inline bool MessageNotification::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageNotification::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageNotification::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageNotification::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& MessageNotification::text() const {
  // @@protoc_insertion_point(field_get:chat.MessageNotification.text)
  return *text_;
}
inline void MessageNotification::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:chat.MessageNotification.text)
}
inline void MessageNotification::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.MessageNotification.text)
}
inline void MessageNotification::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNotification.text)
}
inline ::std::string* MessageNotification::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.MessageNotification.text)
  return text_;
}
inline ::std::string* MessageNotification::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageNotification::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNotification.text)
}

// required string timestamp = 3;
inline bool MessageNotification::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageNotification::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageNotification::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageNotification::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& MessageNotification::timestamp() const {
  // @@protoc_insertion_point(field_get:chat.MessageNotification.timestamp)
  return *timestamp_;
}
inline void MessageNotification::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set:chat.MessageNotification.timestamp)
}
inline void MessageNotification::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.MessageNotification.timestamp)
}
inline void MessageNotification::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNotification.timestamp)
}
inline ::std::string* MessageNotification::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.MessageNotification.timestamp)
  return timestamp_;
}
inline ::std::string* MessageNotification::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageNotification::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNotification.timestamp)
}

// -------------------------------------------------------------------

// WelcomeNotification

// required bytes text = 1;
inline bool WelcomeNotification::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WelcomeNotification::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WelcomeNotification::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WelcomeNotification::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& WelcomeNotification::text() const {
  // @@protoc_insertion_point(field_get:chat.WelcomeNotification.text)
  return *text_;
}
inline void WelcomeNotification::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:chat.WelcomeNotification.text)
}
inline void WelcomeNotification::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.WelcomeNotification.text)
}
inline void WelcomeNotification::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.WelcomeNotification.text)
}
inline ::std::string* WelcomeNotification::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.WelcomeNotification.text)
  return text_;
}
inline ::std::string* WelcomeNotification::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WelcomeNotification::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.WelcomeNotification.text)
}

// -------------------------------------------------------------------

// Request

// optional .chat.LoginRequest login = 1;
inline bool Request::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_login() {
  if (login_ != NULL) login_->::chat::LoginRequest::Clear();
  clear_has_login();
}
inline const ::chat::LoginRequest& Request::login() const {
  // @@protoc_insertion_point(field_get:chat.Request.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::chat::LoginRequest* Request::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::chat::LoginRequest;
  // @@protoc_insertion_point(field_mutable:chat.Request.login)
  return login_;
}
inline ::chat::LoginRequest* Request::release_login() {
  clear_has_login();
  ::chat::LoginRequest* temp = login_;
  login_ = NULL;
  return temp;
}
inline void Request::set_allocated_login(::chat::LoginRequest* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Request.login)
}

// optional .chat.SendMessageRequest send_message = 2;
inline bool Request::has_send_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_send_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_send_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_send_message() {
  if (send_message_ != NULL) send_message_->::chat::SendMessageRequest::Clear();
  clear_has_send_message();
}
inline const ::chat::SendMessageRequest& Request::send_message() const {
  // @@protoc_insertion_point(field_get:chat.Request.send_message)
  return send_message_ != NULL ? *send_message_ : *default_instance_->send_message_;
}
inline ::chat::SendMessageRequest* Request::mutable_send_message() {
  set_has_send_message();
  if (send_message_ == NULL) send_message_ = new ::chat::SendMessageRequest;
  // @@protoc_insertion_point(field_mutable:chat.Request.send_message)
  return send_message_;
}
inline ::chat::SendMessageRequest* Request::release_send_message() {
  clear_has_send_message();
  ::chat::SendMessageRequest* temp = send_message_;
  send_message_ = NULL;
  return temp;
}
inline void Request::set_allocated_send_message(::chat::SendMessageRequest* send_message) {
  delete send_message_;
  send_message_ = send_message;
  if (send_message) {
    set_has_send_message();
  } else {
    clear_has_send_message();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Request.send_message)
}

// -------------------------------------------------------------------

// Response

// required bool result = 1;
inline bool Response::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool Response::result() const {
  // @@protoc_insertion_point(field_get:chat.Response.result)
  return result_;
}
inline void Response::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.Response.result)
}

// required bool last_response = 2;
inline bool Response::has_last_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_last_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_last_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_last_response() {
  last_response_ = false;
  clear_has_last_response();
}
inline bool Response::last_response() const {
  // @@protoc_insertion_point(field_get:chat.Response.last_response)
  return last_response_;
}
inline void Response::set_last_response(bool value) {
  set_has_last_response();
  last_response_ = value;
  // @@protoc_insertion_point(field_set:chat.Response.last_response)
}

// optional bytes error_describe = 3;
inline bool Response::has_error_describe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_error_describe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_error_describe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_error_describe() {
  if (error_describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_describe_->clear();
  }
  clear_has_error_describe();
}
inline const ::std::string& Response::error_describe() const {
  // @@protoc_insertion_point(field_get:chat.Response.error_describe)
  return *error_describe_;
}
inline void Response::set_error_describe(const ::std::string& value) {
  set_has_error_describe();
  if (error_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_describe_ = new ::std::string;
  }
  error_describe_->assign(value);
  // @@protoc_insertion_point(field_set:chat.Response.error_describe)
}
inline void Response::set_error_describe(const char* value) {
  set_has_error_describe();
  if (error_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_describe_ = new ::std::string;
  }
  error_describe_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Response.error_describe)
}
inline void Response::set_error_describe(const void* value, size_t size) {
  set_has_error_describe();
  if (error_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_describe_ = new ::std::string;
  }
  error_describe_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Response.error_describe)
}
inline ::std::string* Response::mutable_error_describe() {
  set_has_error_describe();
  if (error_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_describe_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.Response.error_describe)
  return error_describe_;
}
inline ::std::string* Response::release_error_describe() {
  clear_has_error_describe();
  if (error_describe_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_describe_;
    error_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response::set_allocated_error_describe(::std::string* error_describe) {
  if (error_describe_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_describe_;
  }
  if (error_describe) {
    set_has_error_describe();
    error_describe_ = error_describe;
  } else {
    clear_has_error_describe();
    error_describe_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Response.error_describe)
}

// optional .chat.LoginResponse login = 4;
inline bool Response::has_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_login() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_login() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_login() {
  if (login_ != NULL) login_->::chat::LoginResponse::Clear();
  clear_has_login();
}
inline const ::chat::LoginResponse& Response::login() const {
  // @@protoc_insertion_point(field_get:chat.Response.login)
  return login_ != NULL ? *login_ : *default_instance_->login_;
}
inline ::chat::LoginResponse* Response::mutable_login() {
  set_has_login();
  if (login_ == NULL) login_ = new ::chat::LoginResponse;
  // @@protoc_insertion_point(field_mutable:chat.Response.login)
  return login_;
}
inline ::chat::LoginResponse* Response::release_login() {
  clear_has_login();
  ::chat::LoginResponse* temp = login_;
  login_ = NULL;
  return temp;
}
inline void Response::set_allocated_login(::chat::LoginResponse* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Response.login)
}

// optional .chat.GetFriendsResponse get_friends = 5;
inline bool Response::has_get_friends() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_get_friends() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_get_friends() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_get_friends() {
  if (get_friends_ != NULL) get_friends_->::chat::GetFriendsResponse::Clear();
  clear_has_get_friends();
}
inline const ::chat::GetFriendsResponse& Response::get_friends() const {
  // @@protoc_insertion_point(field_get:chat.Response.get_friends)
  return get_friends_ != NULL ? *get_friends_ : *default_instance_->get_friends_;
}
inline ::chat::GetFriendsResponse* Response::mutable_get_friends() {
  set_has_get_friends();
  if (get_friends_ == NULL) get_friends_ = new ::chat::GetFriendsResponse;
  // @@protoc_insertion_point(field_mutable:chat.Response.get_friends)
  return get_friends_;
}
inline ::chat::GetFriendsResponse* Response::release_get_friends() {
  clear_has_get_friends();
  ::chat::GetFriendsResponse* temp = get_friends_;
  get_friends_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_friends(::chat::GetFriendsResponse* get_friends) {
  delete get_friends_;
  get_friends_ = get_friends;
  if (get_friends) {
    set_has_get_friends();
  } else {
    clear_has_get_friends();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Response.get_friends)
}

// -------------------------------------------------------------------

// Notification

// optional .chat.FriendNotification friend = 1;
inline bool Notification::has_friend_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notification::set_has_friend_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notification::clear_has_friend_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notification::clear_friend_() {
  if (friend__ != NULL) friend__->::chat::FriendNotification::Clear();
  clear_has_friend_();
}
inline const ::chat::FriendNotification& Notification::friend_() const {
  // @@protoc_insertion_point(field_get:chat.Notification.friend)
  return friend__ != NULL ? *friend__ : *default_instance_->friend__;
}
inline ::chat::FriendNotification* Notification::mutable_friend_() {
  set_has_friend_();
  if (friend__ == NULL) friend__ = new ::chat::FriendNotification;
  // @@protoc_insertion_point(field_mutable:chat.Notification.friend)
  return friend__;
}
inline ::chat::FriendNotification* Notification::release_friend_() {
  clear_has_friend_();
  ::chat::FriendNotification* temp = friend__;
  friend__ = NULL;
  return temp;
}
inline void Notification::set_allocated_friend_(::chat::FriendNotification* friend_) {
  delete friend__;
  friend__ = friend_;
  if (friend_) {
    set_has_friend_();
  } else {
    clear_has_friend_();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Notification.friend)
}

// optional .chat.MessageNotification msg = 2;
inline bool Notification::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notification::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notification::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notification::clear_msg() {
  if (msg_ != NULL) msg_->::chat::MessageNotification::Clear();
  clear_has_msg();
}
inline const ::chat::MessageNotification& Notification::msg() const {
  // @@protoc_insertion_point(field_get:chat.Notification.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::chat::MessageNotification* Notification::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::chat::MessageNotification;
  // @@protoc_insertion_point(field_mutable:chat.Notification.msg)
  return msg_;
}
inline ::chat::MessageNotification* Notification::release_msg() {
  clear_has_msg();
  ::chat::MessageNotification* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void Notification::set_allocated_msg(::chat::MessageNotification* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Notification.msg)
}

// optional .chat.WelcomeNotification welcome = 3;
inline bool Notification::has_welcome() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notification::set_has_welcome() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notification::clear_has_welcome() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notification::clear_welcome() {
  if (welcome_ != NULL) welcome_->::chat::WelcomeNotification::Clear();
  clear_has_welcome();
}
inline const ::chat::WelcomeNotification& Notification::welcome() const {
  // @@protoc_insertion_point(field_get:chat.Notification.welcome)
  return welcome_ != NULL ? *welcome_ : *default_instance_->welcome_;
}
inline ::chat::WelcomeNotification* Notification::mutable_welcome() {
  set_has_welcome();
  if (welcome_ == NULL) welcome_ = new ::chat::WelcomeNotification;
  // @@protoc_insertion_point(field_mutable:chat.Notification.welcome)
  return welcome_;
}
inline ::chat::WelcomeNotification* Notification::release_welcome() {
  clear_has_welcome();
  ::chat::WelcomeNotification* temp = welcome_;
  welcome_ = NULL;
  return temp;
}
inline void Notification::set_allocated_welcome(::chat::WelcomeNotification* welcome) {
  delete welcome_;
  welcome_ = welcome;
  if (welcome) {
    set_has_welcome();
  } else {
    clear_has_welcome();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Notification.welcome)
}

// -------------------------------------------------------------------

// Message

// required .chat.MSG msg_type = 1;
inline bool Message::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_msg_type() {
  msg_type_ = 10001;
  clear_has_msg_type();
}
inline ::chat::MSG Message::msg_type() const {
  // @@protoc_insertion_point(field_get:chat.Message.msg_type)
  return static_cast< ::chat::MSG >(msg_type_);
}
inline void Message::set_msg_type(::chat::MSG value) {
  assert(::chat::MSG_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.msg_type)
}

// required fixed32 sequence = 2;
inline bool Message::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Message::sequence() const {
  // @@protoc_insertion_point(field_get:chat.Message.sequence)
  return sequence_;
}
inline void Message::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.sequence)
}

// optional fixed32 session_id = 3;
inline bool Message::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 Message::session_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.session_id)
  return session_id_;
}
inline void Message::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.session_id)
}

// optional .chat.Request request = 4;
inline bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_request() {
  if (request_ != NULL) request_->::chat::Request::Clear();
  clear_has_request();
}
inline const ::chat::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:chat.Message.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::chat::Request* Message::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::chat::Request;
  // @@protoc_insertion_point(field_mutable:chat.Message.request)
  return request_;
}
inline ::chat::Request* Message::release_request() {
  clear_has_request();
  ::chat::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void Message::set_allocated_request(::chat::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.request)
}

// optional .chat.Response response = 5;
inline bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_response() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_response() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_response() {
  if (response_ != NULL) response_->::chat::Response::Clear();
  clear_has_response();
}
inline const ::chat::Response& Message::response() const {
  // @@protoc_insertion_point(field_get:chat.Message.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::chat::Response* Message::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::chat::Response;
  // @@protoc_insertion_point(field_mutable:chat.Message.response)
  return response_;
}
inline ::chat::Response* Message::release_response() {
  clear_has_response();
  ::chat::Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline void Message::set_allocated_response(::chat::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.response)
}

// optional .chat.Notification notification = 6;
inline bool Message::has_notification() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_notification() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_notification() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_notification() {
  if (notification_ != NULL) notification_->::chat::Notification::Clear();
  clear_has_notification();
}
inline const ::chat::Notification& Message::notification() const {
  // @@protoc_insertion_point(field_get:chat.Message.notification)
  return notification_ != NULL ? *notification_ : *default_instance_->notification_;
}
inline ::chat::Notification* Message::mutable_notification() {
  set_has_notification();
  if (notification_ == NULL) notification_ = new ::chat::Notification;
  // @@protoc_insertion_point(field_mutable:chat.Message.notification)
  return notification_;
}
inline ::chat::Notification* Message::release_notification() {
  clear_has_notification();
  ::chat::Notification* temp = notification_;
  notification_ = NULL;
  return temp;
}
inline void Message::set_allocated_notification(::chat::Notification* notification) {
  delete notification_;
  notification_ = notification;
  if (notification) {
    set_has_notification();
  } else {
    clear_has_notification();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.notification)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat::MSG> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::MSG>() {
  return ::chat::MSG_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
